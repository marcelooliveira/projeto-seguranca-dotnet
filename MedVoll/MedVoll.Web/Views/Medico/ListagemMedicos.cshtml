@using MedVoll.Web.Dtos;
@model PaginatedList<MedVoll.Web.Dtos.MedicoDto>

    <main class="container">
        <section class="card">
            <h2 class="title">Listagem de médicos</h2>

            <div class="table-controls">
                <a href="@Url.Action("Formulario", "Medicos" )" class="btn btn-tertiary">
                    <img src="~/assets/plus.png" alt="Ícone de adicionar" class="btn-icon">
                    Novo Médico
                </a>
            </div>

            <table class="tabela">
                <thead>
                    <tr>
                        <th>Nome</th>
                        <th>Email</th>
                        <th>CRM</th>
                        <th>Especialidade</th>
                        <th>Ações</th>
                    </tr>
                </thead>

                <tbody>
                    @foreach (var medico in Model)
                    {
                    <tr>
                        <td>@medico.Nome</td>
                        <td>@medico.Email</td>
                        <td>@medico.Crm</td>
                        <td>@medico.Especialidade</td>
                        <td>
                            <a href="@Url.Action("Formulario", "Medicos" , new { id=medico.Id })" class="btn btn-edit" title="Editar">
                                <img src="~/assets/edit.svg" alt="Editar">
                            </a>

                            <a href="#deleteModal" class="btn btn-delete" data-toggle="modal" data-id="@medico.Id" data-url="/medicos" title="Excluir">
                                <img src="~/assets/delete.svg" alt="Excluir">
                            </a>
                        </td>
                    </tr>
                    }
                </tbody>
            </table>

            <!-- Componente de paginação -->
            @* @await Html.PartialAsync("_paginacao", new PaginacaoViewModel { Url = "medicos", Registros = Model }) *@

        @{
            var prevDisabled = !Model.HasPreviousPage ? "disabled" : "";
            var nextDisabled = !Model.HasNextPage ? "disabled" : "";
        }

        <a asp-action="Index" asp-controller="Medicos"
           asp-route-page="@(Model.PageIndex - 1)"
           class="btn btn-default @prevDisabled">
            Previous
        </a>
        <a asp-action="Index" asp-controller="Medicos"
           asp-route-page="@(Model.PageIndex + 1)"
           class="btn btn-default @nextDisabled">
            Next
        </a>
        </section>
    </main>

    <!-- Modal de Exclusão -->
    @await Html.PartialAsync("_modal_excluir")
